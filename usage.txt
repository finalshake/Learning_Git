----------------------基本操作---------------------------------------
git log
#查看版本历史。

git add test.txt
#添加文件test.txt到暂存区

git commit -m "注释评论"
#把文件提交到仓库，-m加注释评论

git status
#查看是否还有文件未提交

git diff test.txt
#查看文件的变化

----------------------版本回退--------------------------------------
对test.txt增加一行3333333333，并提交到仓库；
之后回退到没有3333333333之前的一个版本。
相关命令：

git log --pretty=oneline
#git log 的单行显示

git reset --hard HEAD^
git reset --hard HEAD^^
#将版本回退到上一个版本，有几个^，就回退几个
git reset --hard HEAD~100
#将版本回退到前100个版本

若想再恢复3333333333，则需知道其版本号，命令如下：

git reflog
#查看回退前的版本号

git reset --hard <version>
#恢复到<version>版本

----------------------撤销修改-------------------------------------
git checkout -- file
#把file文件在工作区做的修改全部撤销，有两种情况：
#1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
#2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。

--------------------删除文件及恢复---------------------------------
直接删除文件并commit即可
恢复文件，在commit之前，执行：
git checkout -- deleted file
#即恢复删除的文件


---------------------Github远程仓库--------------------------------
将本地仓库同步到远程仓库：
1.首先本地已经有了仓库，即Learning_Git；
2.在Github上手动建立Learning_Git的空仓库；
3.本地运行命令：

git remote add origin https://github.com/finalshake/Learning_Git
#把本地的仓库与Github上的仓库关联起来

git push -u origin master
#将本地仓库的master分支推送到Github，第一次push时加了参数-u，这样Git不但会把本地的master分支内容推送的远程
#新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。


----------------------------创建与合并分支--------------------------------
git checkout <branch>
#切换到<branch>分支

git branch dev
#创建名为dev的分支

git checkout -b dev
#创建并切换到dev分支，相当于上两个命令的组合

git branch
#查看所处的分支

在其他分支上完成的工作，经过认可，可以合并到master分支上。方法是切换回master分支，执行：
git merge dev
#将dev分支上的内容合并到master分支上，此处是fast-forward合并模式，即直接把master指向dev的当前提交


git branch -d dev
#删除名为dev的分支


-------------------------合并分支时的冲突解决---------------------------
1.建立并切换到一个新分支fenzhi
2.修改test.txt，添加888888888888新行
3.切换回master分支
4.修改test.txt，添加999999999999新行
5.合并fenzhi，发现出现conflict，不成功
6.手动修改（master|MERGING）中的test.txt，提交即可


git merge -no-ff -m "commit" dev
#禁用fast-forward模式合并dev分支


